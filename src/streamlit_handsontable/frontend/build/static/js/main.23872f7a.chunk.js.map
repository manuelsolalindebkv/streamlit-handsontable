{"version":3,"sources":["HandOnTableComponent.tsx","StreamlitEventsComponent.tsx","index.tsx"],"names":["registerAllModules","HandsontableComponent","_ref","data","initial_data","table_version","height","afterChange","onAfterChange","afterRowAdd","onAfterRowAdd","afterRowDelete","onAfterRowDelete","onReload","hide_columns","columns","initial_tabledata","hotTableComponent","useRef","tabledata","setTableData","React","useState","useEffect","console","log","current","hidden_columns_ids","map","col","indexOf","filter","x","createElement","HotTable","dropdownMenu","hiddenColumns","indicators","columnSorting","filters","contextMenu","colHeaders","rowHeaders","sortByRelevance","autoWrapCol","autoWrapRow","licenseKey","changes","source","hotTableClass","hotInstance","length","physical_changes","change","rowIndex","columnIndex","oldValue","newValue","toPhysicalRow","toPhysicalColumn","error","afterCreateRow","row_index","amount","physicalRowIndex","beforeCreateRow","index","filtersPlugin","getPlugin","afterRemoveRow","colWidths","Math","min","stretchH","ref","version_count","withStreamlitConnection","args","override_height","df_json","df_data","JSON","parse","Streamlit","setFrameHeight","plotlyEventHandler","event","response","response_str","stringify","setComponentValue","ReactDOM","render","StrictMode","StreamlitEventsComponent","document","getElementById"],"mappings":"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","file":"static/js/main.23872f7a.chunk.js","sourcesContent":["import React, { useCallback } from \"react\"\nimport { HotTable } from \"@handsontable/react\"\nimport \"handsontable/dist/handsontable.full.css\"\nimport { useEffect } from \"react\"\nimport { useRef } from \"react\"\n// import Handsontable from 'handsontable';\nimport { registerAllModules } from 'handsontable/registry';\n\n\n\ninterface TableProps {\n  data: {\n    columns: string[]\n    index: number[]\n    data: any[][]\n  }\n  table_version: number\n  height: number\n  afterChange: (data: any) => void\n  afterRowAdd: (data: any) => void\n  afterRowDelete: (data: any) => void\n  onReload: () => void\n  hide_columns: string[]\n}\n\n// register Handsontable's modules\nregisterAllModules();\n\nconst HandsontableComponent: React.FC<TableProps> = ({\n  data: initial_data,\n  table_version,\n  height,\n  afterChange: onAfterChange,\n  afterRowAdd: onAfterRowAdd,\n  afterRowDelete: onAfterRowDelete,\n  onReload,\n  hide_columns,\n}) => {\n  const { columns, data: initial_tabledata } = initial_data\n\n  const hotTableComponent = useRef<any>(null);\n\n  const [tabledata, setTableData] = React.useState(initial_tabledata)\n\n\n  \n  const afterChange = (changes: any, source: any) => {\n    const hotTableClass = hotTableComponent.current\n\n    if (hotTableClass) {\n\n      let hotInstance = hotTableClass.hotInstance\n      if (changes && changes.length > 0) {\n\n        let physical_changes = changes.map((change: [number, number, any, any]) => {\n          const [rowIndex, columnIndex, oldValue, newValue] = change\n          const physicalRowIndex = hotInstance.toPhysicalRow(rowIndex);\n          const physicalColumnIndex = hotInstance.toPhysicalColumn(columnIndex);\n          return [physicalRowIndex, physicalColumnIndex, oldValue, newValue]\n        }\n        )\n\n        onAfterChange(physical_changes)\n\n      }\n\n    } else {\n      console.error('hotTableClass is null')\n      onAfterChange([])\n    }\n\n  }\n\n  const beforeCreateRow = (index: any, amount: any, source: any) => {\n    console.log('beforeCreateRow', index, amount, source)\n    const hotTableClass = hotTableComponent.current\n    if (!hotTableClass) {\n      console.error('hotTableClass is null')\n      return false\n    } else {\n      let hotInstance = hotTableClass.hotInstance\n      // check if filters are applied\n      \n      // Get the Filters plugin\n      const filtersPlugin = hotInstance.getPlugin('Filters');\n\n      console.log('filtersPlugin', filtersPlugin)\n      console.log('hotTableClass', hotTableClass)\n      console.log('hotInstance', hotInstance)\n      //TODO: disable adding row if filters are applied\n\n    }\n\n\n    // if (index === 0) {\n    //   console.log('beforeCreateRow', index, amount, source)\n    //   return false\n    // }\n  }\n\n  const afterRowAdd = (row_index: any, amount: any) => {\n    console.log('row added ', row_index)\n\n    const hotTableClass = hotTableComponent.current\n\n    if (row_index && hotTableClass) {\n      let hotInstance = hotTableClass.hotInstance\n      let physicalRowIndex = hotInstance.toPhysicalRow(row_index);\n      console.log('physicalRowIndex', physicalRowIndex)\n      onAfterRowAdd(physicalRowIndex)\n    } else {\n      // TODO: error adding row before first row\n      if (row_index === 0) {\n        onAfterRowAdd(row_index)\n      } else {\n        console.error('hotTableClass is null')\n      }\n    }\n  }\n\n  const afterRowDelete = (row_index: any) => {\n    console.log(row_index)\n    const hotTableClass = hotTableComponent.current\n    if (row_index && hotTableClass) {\n      let hotInstance = hotTableClass.hotInstance\n      let physicalRowIndex = hotInstance.toPhysicalRow(row_index);\n      onAfterRowDelete(physicalRowIndex)\n    }\n  }\n\n  // on component mount with hooks\n  useEffect(() => {\n    console.log('table_version changed')\n    const hotTableClass = hotTableComponent.current\n    setTableData(initial_tabledata)\n    onReload()\n  }, [table_version])\n  \n  useEffect(() => {\n    const hotTableClass = hotTableComponent.current\n    // console.log('initial_tabledata changed')\n  }, [initial_tabledata])\n\n\n\n\n  let hidden_columns_ids = hide_columns.map((col) => columns.indexOf(col)).filter((x) => x !== -1)\n  \n  // console.log(initial_data)\n  // console.log(hidden_columns_ids)\n\n  return (\n    <HotTable\n      data={tabledata}\n      height={height}\n      dropdownMenu={['filter_by_condition', 'filter_action_bar', 'filter_by_value']}\n      hiddenColumns={{\n        columns: hidden_columns_ids,\n        indicators: false,\n      }}\n      columnSorting={true}\n      filters={true}\n      contextMenu={true} //add and remove rows\n      // contextMenu={['row_above', 'row_below', '---------', 'undo', 'redo']}\n      colHeaders={columns}\n      rowHeaders={true}\n      sortByRelevance={true}\n      autoWrapCol={true}\n      autoWrapRow={true}\n      licenseKey=\"non-commercial-and-evaluation\"\n      afterChange={afterChange}\n      afterCreateRow={afterRowAdd}\n      beforeCreateRow={beforeCreateRow}\n      afterRemoveRow={afterRowDelete}\n      // width={\n      //   columns.length > 0\n      //     ? columns.reduce((acc, curr) => acc + curr.length, 0) * 10\n      //     : 100\n      // }\n      // height=\"auto\"\n      colWidths={columns.map((col) => Math.min(999, 100))} //fixme\n      stretchH=\"all\"\n      ref={hotTableComponent}\n    />\n  )\n}\n\nexport default HandsontableComponent\n","import { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\n// import HandsOnTable from \"./HandsOnTableExample\";\nimport HandsontableComponent from \"./HandOnTableComponent\";\n\n\n\n\n// const jsonData = {\n//   columns: [\"a\", \"b\", \"c\"],\n//   index: [0, 1, 2, 3, 4],\n//   data: [\n//     [-0.2203645667, -0.1364460677, 0.7803492434],\n//     [-1.1966197248, 1.1900065576, 0.3441884038],\n//     [0.6643105109, -0.4865369531, 0.9699144943],\n//     [1.4745054581, -0.2389977022, 1.2352231319],\n//     [0.3313587927, 0.146335964, 0.0602939244]\n//   ]\n// };\n\nvar version_count = 1;\n\nconst StreamlitEventsComponent = ({ args }: { args: any }) => {\n  const override_height = args[\"override_height\"];\n  const df_json = args[\"df_json\"];\n  const df_data = JSON.parse(df_json)\n  const hide_columns = args[\"hide_columns\"];\n  const table_version = args[\"table_version\"];\n\n  console.log(args);\n  console.log('table version', table_version);\n\n\n  useEffect(() => {\n    Streamlit.setFrameHeight(override_height);\n  }, [override_height]);\n\n\n  /** Click handler for plot. */\n  const plotlyEventHandler = (data: any, event: string) => {\n\n    var response: { [key: string]: any } = {};\n    if (event === 'afterChange') {\n      response[event] = data;\n    }\n\n    if (event === 'afterRowAdd') {\n      console.log(data)\n      response[event] = data;\n    }\n    \n    if (event === 'afterRowDelete') {\n      console.log(data)\n      response[event] = data;\n    }\n\n    version_count += 1;\n    response['version'] = version_count;\n\n    console.log('version_count', version_count);\n    \n    let response_str: string;\n    response_str = JSON.stringify(response);\n    Streamlit.setComponentValue(response_str);\n    console.log('response', response);\n\n  };\n\n\n  return(\n    <div>\n      <HandsontableComponent\n          data={df_data} \n          table_version={table_version}\n          height={override_height} \n          afterChange={(data) => plotlyEventHandler(data,'afterChange')}\n          afterRowAdd={(data) => plotlyEventHandler(data,'afterRowAdd')}\n          afterRowDelete={(data) => plotlyEventHandler(data,'afterRowDelete')}\n          onReload={() => console.log('reloaded')}\n          hide_columns={hide_columns}\n          />\n    </div>\n  )\n\n  \n  \n};\n\nexport default withStreamlitConnection(StreamlitEventsComponent);\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitEventsComponent from \"./StreamlitEventsComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitEventsComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}